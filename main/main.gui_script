local dirtylarry = require "dirtylarry/dirtylarry"

local positions = {
    "POPUP_POS_TOP_LEFT",
    "POPUP_POS_TOP_CENTER",
    "POPUP_POS_TOP_RIGHT",
    "POPUP_POS_CENTER_LEFT",
    "POPUP_POS_CENTER",
    "POPUP_POS_CENTER_RIGHT",
    "POPUP_POS_BOTTOM_LEFT",
    "POPUP_POS_BOTTOM_CENTER",
    "POPUP_POS_BOTTOM_RIGHT"
}

local use_saved_games = sys.get_config("gpgs.use_saved_games") == "1"

function gpg_callback(self, message_id, message)
    print("---------")
    print(message_id)
    pprint(message)
    print("---------")
    if message_id == gpgs.MSG_SIGN_IN or message_id == gpgs.MSG_SILENT_SIGN_IN then
        if message.status == gpgs.STATUS_SUCCESS then
            gui.set_text(gui.get_node("id"), gpgs.get_id())
            gui.set_text(gui.get_node("name"), gpgs.get_display_name())

            if sys.get_config("gpgs.client_id") then
                print("id_token: ", gpgs.get_id_token())
                print("auth_code: ", gpgs.get_server_auth_code())
            end

            if use_saved_games then
                print("max_snapshot_image_size: "..gpgs.snapshot_get_max_image_size().." bytes",
                    "max_snapshot_size: "..gpgs.snapshot_get_max_save_size().." bytes")
            end
        end
    elseif message_id == gpgs.MSG_SIGN_OUT then
        gui.set_text(gui.get_node("id"), "---")
        gui.set_text(gui.get_node("name"), "---")
    elseif message_id == gpgs.MSG_LOAD_SNAPSHOT then
        if message.status == gpgs.STATUS_CONFLICT then
            self.conflictId = message.conflictId
        end
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    pprint(_G.gpgs)
    if gpgs then
        gpgs.set_callback(gpg_callback)
        gpgs.silent_login()
    end
end

function update(self, dt)
    if gpgs then
        if self.is_logged_in ~= gpgs.is_logged_in() then
            self.is_logged_in = gpgs.is_logged_in()
            gui.set_text(gui.get_node("autorized"), "is_logged_in: "..tostring(gpgs.is_logged_in()))
        end

        if use_saved_games then
            if self.snapshot_is_opened ~= gpgs.snapshot_is_opened() then
                self.snapshot_is_opened = gpgs.snapshot_is_opened()
                gui.set_text(gui.get_node("snapshotOpened"), "snapshot_is_opened: "..tostring(gpgs.snapshot_is_opened()))
            end
        end
    end
end

local function change_popup_pos(self)
    if not self.pos then
        self.pos = 3
    end
    gui.set_text(gui.get_node("popup_pos_value"), positions[self.pos])
    if gpgs then
        gpgs.set_popup_position(gpgs[positions[self.pos]])
    end
    self.pos = self.pos + 1
    if self.pos > #positions then
        self.pos = 1
    end
end

function on_input(self, action_id, action)
    dirtylarry:button("login", action_id, action, function ()
        print("LOGIN was pressed")
        if gpgs then
            gpgs.login()
        end
    end)

    dirtylarry:button("logout", action_id, action, function ()
        print("LOGOUT was pressed")
        if gpgs then
            gpgs.logout()
        end
    end)

    dirtylarry:button("popup_pos", action_id, action, function ()
        change_popup_pos(self)
    end)

    dirtylarry:button("show_snapshots", action_id, action, function ()
        if gpgs then
            gpgs.snapshot_display_saves("My cool saves", true, true, 3)
        end
    end)

    dirtylarry:button("snapshot_open", action_id, action, function ()
        if gpgs then
            gpgs.snapshot_open("my_save", true, gpgs.RESOLUTION_POLICY_MANUAL)
        end
    end)

    dirtylarry:button("snapshot_get_data", action_id, action, function ()
        if gpgs then
            local bytes, error_message = gpgs.snapshot_get_data()
            if not bytes then
                print("snapshot_get_data ERROR:", error_message)
            else
                print("snapshot_get_data",bytes)
            end
        end
    end)

    dirtylarry:button("save_snapshot", action_id, action, function ()
        if gpgs then
            local png, w, h = screenshot.png()
            gpgs.snapshot_commit_and_close({
                coverImage = png,
                description = "LEVEL 31, CAVE",
                playedTime = math.random(1000, 2000),
                progressValue = math.random(1000, 2000)
            })
        end
    end)

    dirtylarry:button("snapshot_get_conflicting_data", action_id, action, function ()
        if gpgs then
            local bytes, error_message = gpgs.snapshot_get_conflicting_data()
            if not bytes then
                print("snapshot_get_conflicting_data ERROR: ", error_message)
            else
                print("snapshot_get_conflicting_data: ",bytes)
            end
        end
    end)

    dirtylarry:button("snapshot_set_data", action_id, action, function ()
        if gpgs then
            local success, error_message = gpgs.snapshot_set_data("MyCustomBytesForSnapshot")
            if not success then
                print("snapshot_set_data ERROR:", error_message)
            end
        end
    end)

    dirtylarry:button("snapshot_resolve_conflict", action_id, action, function ()
        if gpgs then
            local success, error_message = gpgs.snapshot_resolve_conflict(self.conflictId, gpgs.SNAPSHOT_CURRENT)
            if not success then
                print("snapshot_resolve_conflict ERROR:", error_message)
            end
        end
    end)

    dirtylarry:button("snapshot_resolve_conflict_conflicting", action_id, action, function ()
        if gpgs then
            gpgs.snapshot_resolve_conflict(self.conflictId, gpgs.SNAPSHOT_CONFLICTING)
        end
    end)

end